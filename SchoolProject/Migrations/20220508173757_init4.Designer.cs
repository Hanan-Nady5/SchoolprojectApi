// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolProject.Models;

namespace SchoolProject.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220508173757_init4")]
    partial class init4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClassQuiz", b =>
                {
                    b.Property<int>("ClassesID")
                        .HasColumnType("int");

                    b.Property<int>("QuizsID")
                        .HasColumnType("int");

                    b.HasKey("ClassesID", "QuizsID");

                    b.HasIndex("QuizsID");

                    b.ToTable("ClassQuiz");
                });

            modelBuilder.Entity("ClassTeacher", b =>
                {
                    b.Property<int>("ClassesID")
                        .HasColumnType("int");

                    b.Property<string>("TeachersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClassesID", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("ClassTeacher");
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.Property<string>("TeachersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("coursesID")
                        .HasColumnType("int");

                    b.HasKey("TeachersId", "coursesID");

                    b.HasIndex("coursesID");

                    b.ToTable("CourseTeacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SchoolProject.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BusID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BusID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SchoolProject.Models.Bus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusAdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BusChairNumber")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("BusDriverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BusLineID")
                        .HasColumnType("int");

                    b.Property<string>("BusNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int?>("BusRegonID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("BusAdminId");

                    b.HasIndex("BusLineID");

                    b.HasIndex("BusRegonID");

                    b.ToTable("Buss");
                });

            modelBuilder.Entity("SchoolProject.Models.BusLine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BusLines");
                });

            modelBuilder.Entity("SchoolProject.Models.BusRegon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusLineID")
                        .HasColumnType("int");

                    b.Property<string>("RegonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BusLineID");

                    b.ToTable("BusRegons");
                });

            modelBuilder.Entity("SchoolProject.Models.Class", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChairNumber")
                        .HasColumnType("int");

                    b.Property<int?>("LevelID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("LevelID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SchoolProject.Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LevelID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("LevelID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SchoolProject.Models.CourseSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Class_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Level_ID")
                        .HasColumnType("int");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Class_ID");

                    b.HasIndex("Level_ID");

                    b.ToTable("courseSchedules");
                });

            modelBuilder.Entity("SchoolProject.Models.CourseScheduleDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CourseSchedule_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Course_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CourseSchedule_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("courseScheduleDetails");
                });

            modelBuilder.Entity("SchoolProject.Models.HistoryOfStudend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LevelID")
                        .HasColumnType("int");

                    b.Property<int?>("StudyYearID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("LevelID");

                    b.HasIndex("StudyYearID");

                    b.ToTable("historyOfStudends");
                });

            modelBuilder.Entity("SchoolProject.Models.Level", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HistoryOfStudendID")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HistoryOfStudendID");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("SchoolProject.Models.Quiz", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndQuizTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartQuizime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("courseId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("courseId");

                    b.ToTable("ExamTables");
                });

            modelBuilder.Entity("SchoolProject.Models.StaffAttentance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HeadManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Isabsent")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceptionistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("HeadManagerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ReceptionistId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StaffAttentances");
                });

            modelBuilder.Entity("SchoolProject.Models.StudentAttentance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassID")
                        .HasColumnType("int");

                    b.Property<bool>("Isabsent")
                        .HasColumnType("bit");

                    b.Property<string>("StudyClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("studentAttendanceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.HasIndex("studentAttendanceID");

                    b.ToTable("StudentAttentances");
                });

            modelBuilder.Entity("SchoolProject.Models.StudyYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("End_StudyYear")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HistoryOfStudendID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start_StudyYear")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HistoryOfStudendID");

                    b.ToTable("StudyYears");
                });

            modelBuilder.Entity("SchoolProject.Models.VistorHitory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Visit_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitiorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VisitiorReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("VisitiorId");

                    b.ToTable("vistorHitories");
                });

            modelBuilder.Entity("SchoolProject.Models.BusAdmin", b =>
                {
                    b.HasBaseType("SchoolProject.Models.ApplicationUser");

                    b.ToTable("BusAdmin");
                });

            modelBuilder.Entity("SchoolProject.Models.HeadManager", b =>
                {
                    b.HasBaseType("SchoolProject.Models.ApplicationUser");

                    b.Property<int>("HeadManagerebusId")
                        .HasColumnType("int");

                    b.HasIndex("HeadManagerebusId");

                    b.ToTable("HeadManager");
                });

            modelBuilder.Entity("SchoolProject.Models.Manager", b =>
                {
                    b.HasBaseType("SchoolProject.Models.ApplicationUser");

                    b.Property<int?>("ManagerbusId")
                        .HasColumnType("int");

                    b.HasIndex("ManagerbusId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("SchoolProject.Models.Parent", b =>
                {
                    b.HasBaseType("SchoolProject.Models.ApplicationUser");

                    b.Property<double?>("TuitionExpenses")
                        .HasColumnType("float");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("SchoolProject.Models.Receptionist", b =>
                {
                    b.HasBaseType("SchoolProject.Models.ApplicationUser");

                    b.ToTable("Receptionist");
                });

            modelBuilder.Entity("SchoolProject.Models.Student", b =>
                {
                    b.HasBaseType("SchoolProject.Models.ApplicationUser");

                    b.Property<int>("AbsenceDays")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryOfStudendID")
                        .HasColumnType("int");

                    b.Property<int>("Holiday")
                        .HasColumnType("int");

                    b.Property<int?>("LevelID")
                        .HasColumnType("int");

                    b.Property<string>("ParentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("busStudentID")
                        .HasColumnType("int");

                    b.Property<int?>("classId")
                        .HasColumnType("int");

                    b.Property<int>("counterForLevel")
                        .HasColumnType("int");

                    b.Property<int?>("studyYearID")
                        .HasColumnType("int");

                    b.HasIndex("HistoryOfStudendID");

                    b.HasIndex("LevelID");

                    b.HasIndex("ParentID");

                    b.HasIndex("busStudentID");

                    b.HasIndex("classId");

                    b.HasIndex("studyYearID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SchoolProject.Models.Teacher", b =>
                {
                    b.HasBaseType("SchoolProject.Models.ApplicationUser");

                    b.Property<int>("busTeacherID")
                        .HasColumnType("int");

                    b.HasIndex("busTeacherID");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("SchoolProject.Models.Visitior", b =>
                {
                    b.HasBaseType("SchoolProject.Models.ApplicationUser");

                    b.Property<string>("ReceptionistId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ReceptionistId");

                    b.ToTable("Visitior");
                });

            modelBuilder.Entity("ClassQuiz", b =>
                {
                    b.HasOne("SchoolProject.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassTeacher", b =>
                {
                    b.HasOne("SchoolProject.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.HasOne("SchoolProject.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("coursesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolProject.Models.ApplicationUser", b =>
                {
                    b.HasOne("SchoolProject.Models.Bus", null)
                        .WithMany("Users")
                        .HasForeignKey("BusID");
                });

            modelBuilder.Entity("SchoolProject.Models.Bus", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("SchoolProject.Models.BusAdmin", null)
                        .WithMany("Buses")
                        .HasForeignKey("BusAdminId");

                    b.HasOne("SchoolProject.Models.BusLine", "busLine")
                        .WithMany("Buses")
                        .HasForeignKey("BusLineID");

                    b.HasOne("SchoolProject.Models.BusRegon", null)
                        .WithMany("Buses")
                        .HasForeignKey("BusRegonID");

                    b.Navigation("ApplicationUser");

                    b.Navigation("busLine");
                });

            modelBuilder.Entity("SchoolProject.Models.BusRegon", b =>
                {
                    b.HasOne("SchoolProject.Models.BusLine", null)
                        .WithMany("BusRegions")
                        .HasForeignKey("BusLineID");
                });

            modelBuilder.Entity("SchoolProject.Models.Class", b =>
                {
                    b.HasOne("SchoolProject.Models.Level", "Level")
                        .WithMany("classes")
                        .HasForeignKey("LevelID");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("SchoolProject.Models.Course", b =>
                {
                    b.HasOne("SchoolProject.Models.Level", "level")
                        .WithMany()
                        .HasForeignKey("LevelID");

                    b.Navigation("level");
                });

            modelBuilder.Entity("SchoolProject.Models.CourseSchedule", b =>
                {
                    b.HasOne("SchoolProject.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("Class_ID");

                    b.HasOne("SchoolProject.Models.Level", "level")
                        .WithMany()
                        .HasForeignKey("Level_ID");

                    b.Navigation("Class");

                    b.Navigation("level");
                });

            modelBuilder.Entity("SchoolProject.Models.CourseScheduleDetails", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("SchoolProject.Models.CourseSchedule", "CourseSchedule")
                        .WithMany()
                        .HasForeignKey("CourseSchedule_ID");

                    b.HasOne("SchoolProject.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("Course_ID");

                    b.Navigation("ApplicationUser");

                    b.Navigation("course");

                    b.Navigation("CourseSchedule");
                });

            modelBuilder.Entity("SchoolProject.Models.HistoryOfStudend", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("SchoolProject.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelID");

                    b.HasOne("SchoolProject.Models.StudyYear", "StudyYear")
                        .WithMany()
                        .HasForeignKey("StudyYearID");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Level");

                    b.Navigation("StudyYear");
                });

            modelBuilder.Entity("SchoolProject.Models.Level", b =>
                {
                    b.HasOne("SchoolProject.Models.HistoryOfStudend", "HistoryOfStudend")
                        .WithMany()
                        .HasForeignKey("HistoryOfStudendID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoryOfStudend");
                });

            modelBuilder.Entity("SchoolProject.Models.Quiz", b =>
                {
                    b.HasOne("SchoolProject.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId");

                    b.Navigation("course");
                });

            modelBuilder.Entity("SchoolProject.Models.StaffAttentance", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("SchoolProject.Models.HeadManager", null)
                        .WithMany("staffAttentances")
                        .HasForeignKey("HeadManagerId");

                    b.HasOne("SchoolProject.Models.Manager", null)
                        .WithMany("staffAttentances")
                        .HasForeignKey("ManagerId");

                    b.HasOne("SchoolProject.Models.Receptionist", null)
                        .WithMany("staffAttentances")
                        .HasForeignKey("ReceptionistId");

                    b.HasOne("SchoolProject.Models.Teacher", null)
                        .WithMany("staffAttentances")
                        .HasForeignKey("TeacherId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SchoolProject.Models.StudentAttentance", b =>
                {
                    b.HasOne("SchoolProject.Models.Class", null)
                        .WithMany("studentAttentances")
                        .HasForeignKey("ClassID");

                    b.HasOne("SchoolProject.Models.Student", "studentAttendance")
                        .WithMany("studentAttentance")
                        .HasForeignKey("studentAttendanceID");

                    b.Navigation("studentAttendance");
                });

            modelBuilder.Entity("SchoolProject.Models.StudyYear", b =>
                {
                    b.HasOne("SchoolProject.Models.HistoryOfStudend", "HistoryOfStudend")
                        .WithMany()
                        .HasForeignKey("HistoryOfStudendID");

                    b.Navigation("HistoryOfStudend");
                });

            modelBuilder.Entity("SchoolProject.Models.VistorHitory", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("SchoolProject.Models.Visitior", null)
                        .WithMany("VistorHitories")
                        .HasForeignKey("VisitiorId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SchoolProject.Models.BusAdmin", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("SchoolProject.Models.BusAdmin", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolProject.Models.HeadManager", b =>
                {
                    b.HasOne("SchoolProject.Models.Bus", "HeadManagerebus")
                        .WithMany()
                        .HasForeignKey("HeadManagerebusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("SchoolProject.Models.HeadManager", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("HeadManagerebus");
                });

            modelBuilder.Entity("SchoolProject.Models.Manager", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("SchoolProject.Models.Manager", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Bus", "Managerbus")
                        .WithMany()
                        .HasForeignKey("ManagerbusId");

                    b.Navigation("Managerbus");
                });

            modelBuilder.Entity("SchoolProject.Models.Parent", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("SchoolProject.Models.Parent", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolProject.Models.Receptionist", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("SchoolProject.Models.Receptionist", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolProject.Models.Student", b =>
                {
                    b.HasOne("SchoolProject.Models.HistoryOfStudend", "HistoryOfStudend")
                        .WithMany()
                        .HasForeignKey("HistoryOfStudendID");

                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("SchoolProject.Models.Student", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Level", "Level")
                        .WithMany("Students")
                        .HasForeignKey("LevelID");

                    b.HasOne("SchoolProject.Models.Parent", "parent")
                        .WithMany("students")
                        .HasForeignKey("ParentID");

                    b.HasOne("SchoolProject.Models.Bus", "busStudent")
                        .WithMany()
                        .HasForeignKey("busStudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Class", "classes")
                        .WithMany("Students")
                        .HasForeignKey("classId");

                    b.HasOne("SchoolProject.Models.StudyYear", "studyYear")
                        .WithMany("students")
                        .HasForeignKey("studyYearID");

                    b.Navigation("busStudent");

                    b.Navigation("classes");

                    b.Navigation("HistoryOfStudend");

                    b.Navigation("Level");

                    b.Navigation("parent");

                    b.Navigation("studyYear");
                });

            modelBuilder.Entity("SchoolProject.Models.Teacher", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("SchoolProject.Models.Teacher", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Bus", "busTeacher")
                        .WithMany()
                        .HasForeignKey("busTeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("busTeacher");
                });

            modelBuilder.Entity("SchoolProject.Models.Visitior", b =>
                {
                    b.HasOne("SchoolProject.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("SchoolProject.Models.Visitior", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Receptionist", null)
                        .WithMany("visitiors")
                        .HasForeignKey("ReceptionistId");
                });

            modelBuilder.Entity("SchoolProject.Models.Bus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SchoolProject.Models.BusLine", b =>
                {
                    b.Navigation("Buses");

                    b.Navigation("BusRegions");
                });

            modelBuilder.Entity("SchoolProject.Models.BusRegon", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("SchoolProject.Models.Class", b =>
                {
                    b.Navigation("studentAttentances");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolProject.Models.Level", b =>
                {
                    b.Navigation("classes");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolProject.Models.StudyYear", b =>
                {
                    b.Navigation("students");
                });

            modelBuilder.Entity("SchoolProject.Models.BusAdmin", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("SchoolProject.Models.HeadManager", b =>
                {
                    b.Navigation("staffAttentances");
                });

            modelBuilder.Entity("SchoolProject.Models.Manager", b =>
                {
                    b.Navigation("staffAttentances");
                });

            modelBuilder.Entity("SchoolProject.Models.Parent", b =>
                {
                    b.Navigation("students");
                });

            modelBuilder.Entity("SchoolProject.Models.Receptionist", b =>
                {
                    b.Navigation("staffAttentances");

                    b.Navigation("visitiors");
                });

            modelBuilder.Entity("SchoolProject.Models.Student", b =>
                {
                    b.Navigation("studentAttentance");
                });

            modelBuilder.Entity("SchoolProject.Models.Teacher", b =>
                {
                    b.Navigation("staffAttentances");
                });

            modelBuilder.Entity("SchoolProject.Models.Visitior", b =>
                {
                    b.Navigation("VistorHitories");
                });
#pragma warning restore 612, 618
        }
    }
}
